// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get admitted(): boolean {
    let value = this.get("admitted");
    return value.toBoolean();
  }

  set admitted(value: boolean) {
    this.set("admitted", Value.fromBoolean(value));
  }
}

export class UserTokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserTokenBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserTokenBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserTokenBalance", id.toString(), this);
  }

  static load(id: string): UserTokenBalance | null {
    return store.get("UserTokenBalance", id) as UserTokenBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amountLocked(): BigInt {
    let value = this.get("amountLocked");
    return value.toBigInt();
  }

  set amountLocked(value: BigInt) {
    this.set("amountLocked", Value.fromBigInt(value));
  }

  get amountAvailable(): BigInt {
    let value = this.get("amountAvailable");
    return value.toBigInt();
  }

  set amountAvailable(value: BigInt) {
    this.set("amountAvailable", Value.fromBigInt(value));
  }
}

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Order entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Order entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Order", id.toString(), this);
  }

  static load(id: string): Order | null {
    return store.get("Order", id) as Order | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get haveToken(): string {
    let value = this.get("haveToken");
    return value.toString();
  }

  set haveToken(value: string) {
    this.set("haveToken", Value.fromString(value));
  }

  get haveAmount(): BigInt {
    let value = this.get("haveAmount");
    return value.toBigInt();
  }

  set haveAmount(value: BigInt) {
    this.set("haveAmount", Value.fromBigInt(value));
  }

  get wantToken(): string {
    let value = this.get("wantToken");
    return value.toString();
  }

  set wantToken(value: string) {
    this.set("wantToken", Value.fromString(value));
  }

  get wantAmount(): BigInt {
    let value = this.get("wantAmount");
    return value.toBigInt();
  }

  set wantAmount(value: BigInt) {
    this.set("wantAmount", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get expirationBlock(): BigInt {
    let value = this.get("expirationBlock");
    return value.toBigInt();
  }

  set expirationBlock(value: BigInt) {
    this.set("expirationBlock", Value.fromBigInt(value));
  }

  get filledAmount(): BigInt {
    let value = this.get("filledAmount");
    return value.toBigInt();
  }

  set filledAmount(value: BigInt) {
    this.set("filledAmount", Value.fromBigInt(value));
  }

  get canceled(): boolean {
    let value = this.get("canceled");
    return value.toBoolean();
  }

  set canceled(value: boolean) {
    this.set("canceled", Value.fromBoolean(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get orderSubmissions(): Array<string> {
    let value = this.get("orderSubmissions");
    return value.toStringArray();
  }

  set orderSubmissions(value: Array<string>) {
    this.set("orderSubmissions", Value.fromStringArray(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}
